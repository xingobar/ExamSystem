<?php

namespace Tests\Feature;

use App\Location;
use Mockery\Mock;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

use App\User;
use Mockery;
use Session;

class LocationTest extends TestCase
{

    /**
     * @param Mock $repositoryMock 假裝的repository
     *
     */
    protected $repositoryMock = null;

    /**
     *  test edit location view whether locations vairable exist or not
     *
     * @return void
     */
//     public function testViewHasLocation()
//     {
//         // 驗證登入
//         $user = new User(array('email' => 'garyng@gmail.com'));
//         $this->be($user); //You are now authenticated
//
//         // 嘗試 get 網址
//         $response = $this->call('GET','/edit_location');
//
//
//         // 判斷回應是否為 200 OK
//         $response->assertStatus(200);
//
//         // 判斷 views 裡是否有 locations 變數
//         $response->assertViewHas('locations');
//     }


    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub


        // Mockery mock 利用 reflection 機制建立假物件
        $this->repositoryMock = Mockery::mock('App\Service\LocationService');

        // 用假物件來取代我們原本的 LocationRepository 物件
        $this->app->instance('App\Service\LocationService', $this->repositoryMock);

        // 驗證登入
        $user = new User(array('email' => 'garyng@gmail.com'));
        $this->be($user); //You are now authenticated

    }


    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->repositoryMock = null;
        // 每次 test case 結束後要清掉假物件
        Mockery::close();
    }

    public function testLocationList()
    {

        $this->repositoryMock->shouldReceive('getAllLocation')
            ->once()
            ->andReturn([]);

        $response = $this->call('GET', '/edit_location');
        $response->assertStatus(200);
        $response->assertViewHas('locations', []);
    }

    public function testCsrfFailed()
    {

        // 未傳遞 token 時 應為 failed
        $response = $this->call('POST', '/store_location', ['name' => 'test']);
        $response->assertStatus(500);
    }

    public function testAddLocation()
    {


        //初始化 session , 避免 csrf token
        Session::start();

        // post data to location service

        $data = array('request'=> [
            'name'=>'Taipei',
            '_token'=>csrf_token()
        ]);


        $this->repositoryMock
            ->shouldReceive('insertLocation')
            ->with($data)
            ->once()
            ->andReturn(true);


        // 模擬送出表單
        $response = $this->call('POST','/store_location',$data);

        // http code 302 is redirect
        $response->assertStatus(302);
        //$response->assertRedirect('/');
    }

}
